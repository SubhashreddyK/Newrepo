terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "5.91.0"
    }
  }
}

provider "aws" {
  # Configuration options
}

provider "aws" {
  region  = "us-east-1"
  profile = "default"
}

terraform {
  backend "s3" {
    bucket = "subhashreddy"
    key    = "Dev/terraform.state"
    region = "us-east-1"
    #profile = "superhero"
  }
}

# VPC
resource "aws_vpc" "skr_vpc" {
  cidr_block           = var.cidr
  instance_tenancy     = "default"
  enable_dns_support   = var.enable_dns_support
  enable_dns_hostnames = var.enable_dns_hostnames

  tags = {
    Name      = "skr_vpc"
    CreatedBy = "iac - terraform"
  }
}

# Subnet - Public-1 
resource "aws_subnet" "skr_vpc_public_subnet_1" {
  vpc_id                  = aws_vpc.skr_vpc.id
  cidr_block              = "192.168.1.0/24"
  map_public_ip_on_launch = true
  availability_zone       = "us-east-1a"

  tags = {
    Name      = "skr_vpc_public_subnet_1"
    CreatedBy = "iac - terraform"
  }

}
# Subnet - Public-2
resource "aws_subnet" "skr_vpc_public_subnet_2" {
  vpc_id                  = aws_vpc.skr_vpc.id
  cidr_block              = "192.168.2.0/24"
  map_public_ip_on_launch = true
  availability_zone       = "us-east-1b"

  tags = {
    Name      = "skr_vpc_public_subnet_2"
    CreatedBy = "iac - terraform"
  }
}
# Subnet - private-1 
resource "aws_subnet" "skr_vpc_private_subnet_1" {
  vpc_id            = aws_vpc.skr_vpc.id
  cidr_block        = "192.168.3.0/24"
  availability_zone = "us-east-1a"

  tags = {
    Name      = "skr_vpc_private_subnet_1"
    CreatedBy = "iac - terraform"
  }

}
# Subnet - private-2 
resource "aws_subnet" "skr_vpc_private_subnet_2" {
  vpc_id            = aws_vpc.skr_vpc.id
  cidr_block        = "192.168.4.0/24"
  availability_zone = "us-east-1b"

  tags = {
    Name      = "skr_vpc_private_subnet_2"
    CreatedBy = "iac - terraform"
  }
}

# RTB - Public-1
resource "aws_route_table" "skr_vpc_public_rtb" {
  vpc_id = aws_vpc.skr_vpc.id

  tags = {
    Name      = "skr_vpc_public_rtb"
    CreatedBy = "iac - terraform"
  }
}

# RTB - Private-1
resource "aws_route_table" "skr_vpc_private_rtb" {
  vpc_id = aws_vpc.skr_vpc.id

  tags = {
    Name      = "skr_vpc_private_rtb"
    CreatedBy = "iac - terraform"
  }
}

# IGW 
resource "aws_internet_gateway" "skr_igw" {
  vpc_id = aws_vpc.skr_vpc.id

  tags = {
    Name      = "skr_igw"
    CreatedBy = "iac - terraform"
  }

}

# Create Routing to Public-RTB From IGW
resource "aws_route" "skr_rtb_igw" {
  route_table_id         = aws_route_table.skr_vpc_public_rtb.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.skr_igw.id

}

# Subnet Association with Public Route Table
resource "aws_route_table_association" "skr_vpc_public_subnet_1_association" {
  subnet_id      = aws_subnet.skr_vpc_public_subnet_1.id
  route_table_id = aws_route_table.skr_vpc_public_rtb.id
}
# Subnet Association with Public Route Table
resource "aws_route_table_association" "skr_vpc_public_subnet_2_association" {
  subnet_id      = aws_subnet.skr_vpc_public_subnet_2.id
  route_table_id = aws_route_table.skr_vpc_public_rtb.id
}

# Subnet Association with Private Route Table
resource "aws_route_table_association" "skr_vpc_private_subnet_1_association" {
  subnet_id      = aws_subnet.skr_vpc_private_subnet_1.id
  route_table_id = aws_route_table.skr_vpc_private_rtb.id
}
# Subnet Association with Private Route Table
resource "aws_route_table_association" "skr_vpc_private_subnet_2_association" {
  subnet_id      = aws_subnet.skr_vpc_private_subnet_2.id
  route_table_id = aws_route_table.skr_vpc_private_rtb.id
}

# elastic ip
resource "aws_eip" "skr_eip" {
  domain = "vpc"
}

# NAT Gateway & Attach EIP to NAT GATEWAY
resource "aws_nat_gateway" "skr_natgw" {
  allocation_id = aws_eip.skr_eip.id
  subnet_id     = aws_subnet.skr_vpc_public_subnet_1.id

  tags = {
    Name      = "skr_natgw"
    CreatedBy = "iac - terraform"
  }
}

# Allow  Nat Gateway To Private Route Table
resource "aws_route" "skr_natgw" {
  route_table_id         = aws_route_table.skr_vpc_private_rtb.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_nat_gateway.skr_natgw.id

}

# NACL 
resource "aws_network_acl" "skr_nacl" {
  vpc_id     = aws_vpc.skr_vpc.id
  subnet_ids = [aws_subnet.skr_vpc_public_subnet_1.id, aws_subnet.skr_vpc_public_subnet_2.id, aws_subnet.skr_vpc_private_subnet_1.id, aws_subnet.skr_vpc_private_subnet_2.id]

  # ingress / inbound
  ingress {
    protocol   = "-1"
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }
  # egress / outbound
  egress {
    protocol   = "-1"
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }

  tags = {
    Name      = "skr_nacl"
    CreatedBy = "IAC - Terraform"
  }

}

# SG For Bastion
resource "aws_security_group" "skr_sg_bastion" {
  vpc_id      = aws_vpc.skr_vpc.id
  name        = "sg_bastion"
  description = "Allow SSH And RDP"

  ingress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
  }
  ingress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port   = 3389
    to_port     = 3389
    protocol    = "tcp"
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name        = "skr_sg_bastion"
    Description = "Allow SSH and RDP"
    CreatedBy   = "IAC - Terraform"
  }

}


# EC2 Instance in Private Subnet
resource "aws_instance" "skr_web" {
  ami                    = "ami-067d1e60475437da2"
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.skr_vpc_public_subnet_1.id
  vpc_security_group_ids = ["${aws_security_group.skr_sg_bastion.id}"]
  #user_data              = file("web.sh")

  tags = {
    Name      = "skr_web"
    CreatedBy = "IAC - Terraform"
    OSType    = "Linux - Ubuntu 20.04"
  }
}

variable "cidr" {
  default = "192.168.0.0/18"
}

variable "enable_dns_support" {
  default = true
}

variable "enable_dns_hostnames" {
  default = true

}